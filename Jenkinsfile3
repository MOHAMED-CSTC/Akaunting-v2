pipeline {
  agent any

  environment {
    DOCKER_REGISTRY = 'docker.io'                                 // Registre Docker (Docker Hub)
    DOCKER_IMAGE = 'mohamedbouchakour/akauting_cstc'             // Nom de l'image dans Docker Hub
    DOCKER_CREDENTIALS_ID = 'Docker_token'                      // ID des credentials Jenkins pour Docker Hub
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Cloning the repository...'
        checkout scm // Clone le dépôt Git
      }
    }

    stage('Build Docker Image') {
      steps {
        echo 'Building Docker image...'
        script {
          def imageName = "${DOCKER_IMAGE}:${env.BUILD_NUMBER}"  // Tag basé sur le numéro de build
          docker.build(imageName)
          env.DOCKER_IMAGE_TAG = imageName                      // Stocker le tag pour réutilisation
        }
      }
    }

    stage('Test Docker Image') {
      steps {
        echo 'Running container for tests...'
        script {
          docker.image(env.DOCKER_IMAGE_TAG).withRun('-d -p 8080:80') { container ->
            sleep 15 // Attendre le démarrage de l'application
            sh 'curl -f http://localhost:8080 || exit 1' // Vérifie si l'application est accessible
          }
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        echo 'Pushing Docker image to Docker Hub...'
        script {
          docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
            docker.image(env.DOCKER_IMAGE_TAG).push()
          }
        }
      }
    }
  }

  post {
    success {
      echo 'Pipeline completed successfully!'
    }

    failure {
      echo 'Pipeline failed. Please check the logs.'
    }

    always {
      echo 'Cleaning up...'
      sh 'docker system prune -f' // Nettoyer les images inutilisées
    }
  }
}
